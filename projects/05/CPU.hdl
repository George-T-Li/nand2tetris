// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // instruction = i xx a cccccc ddd jjj
    // i = 0: A-instruction, i = 1: C-instruction
    // a = 0: Operations on D and A, a = 1: Operations on D and M
    // cccccc: specifies a computation
    // ddd: specifies where to store computed value
    // jjj: specifies where to jump to

    // When to perform A-instruction and when to perform C-instruction:
    Not(in = instruction[15], out = doA);
    Not(in = doA, out = doC);
    
    // When to load A-register: when A-instruction is performed
    //                          when C-instruction is performed and destination is A register
    And(a = doC, b = instruction[5], out = destA);
    Or(a = doA, b = destA, out = loadA);

    // What to load A-register with: A-instruction, or result of ALU (C-instruction)
    Mux16(a = instruction, b = result, sel = doC, out = forAReg);
    ARegister(in = forAReg, load = loadA, out[0..14] = addressM, out = valueA);

    // When to load D-register: when C-instruction is performed and destination is D register
    And(a = doC, b = instruction[4], out = loadD);
    DRegister(in = result, load = loadD, out = valueD);

    // Either operate on A or operate on M[A] (where M[A] = inM)
    Mux16(a = valueA, b = inM, sel = instruction[12], out = AorM);

    // Use ALU:
    ALU(x = valueD, y = AorM, zx = instruction[11], nx = instruction[10], 
        zy = instruction[9], ny = instruction[8], f = instruction[7], 
        no = instruction[6], out = result, out = outM, zr = resultZero, ng = resultNeg);
    
    // When to write to M: C-instruction is performed and destination is Memory[A]
    And(a = doC, b = instruction[3], out = toWriteM, out = writeM);
    // Register(in = addrM, load = toWriteM, out = addressM);

    // When to jump: Only for C-instructions!
    Not(in = resultNeg, out = zeroOrPos);
    Not(in = resultZero, out = notZero);
    And(a = zeroOrPos, b = notZero, out = resultPos);
    And(a = resultPos, b = instruction[0], out = JGT);
    And(a = resultZero, b = instruction[1], out = JEQ);
    And(a = resultNeg, b = instruction[2], out = JLT);
    Or(a = JGT, b = JLT, out = JNE);
    Or(a = JEQ, b = JNE, out = JMP);
    And(a = doC, b = JMP, out = jump);
    Not(in = jump, out = next);

    // Program counter:
    PC(in = valueA, load = jump, inc = next, reset = reset, out[0..14] = pc);    
}
