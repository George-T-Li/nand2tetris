// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // Decide where to load
    DMux4Way(in = load, sel = address[13..14], a = RAM08, b = RAM916, c = loadScreen, d = key);
    Or(a = RAM08, b = RAM916, out = loadRAM);

    // Load into the correct parts
    RAM16K(in = in, load = loadRAM, address = address[0..13], out = outRAM);
    Screen(in = in, load = loadScreen, address = address[0..12], out = outScreen);
    Keyboard(out = outKeyboard);

    // Keyboard is used when the 15th and 14th bits are both 1
    // Screen is used when the 15th bit is 1 and 14th bit is 0
    // RAM is used when the 15th bit is 0
    Mux4Way16(a = outRAM, b = outRAM, c = outScreen, d = outKeyboard, sel = address[13..14], out = out);
}
